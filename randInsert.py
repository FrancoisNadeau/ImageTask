# -*- coding: utf-8 -*-
"""
Created on Sun Sep 22 00:30:07 2019

@author: Francois
"""
from random import SystemRandom as rand
from secrets import randbelow as rb
from flatten import flatten

def randInsert(lst, item):
    """Insert item to random index in lst
    ...
    
    Description
    -----------
    Inserts 'item' (can be any variable a list can contain)
    in 'lst' (a list) at a random index generated by 
    secret.ranbelow() module imported as rb.
        -cryptographically secure random values 
    
    The advantage of using this method over using built-in
    list .insert() method is that randInsert() returns a
    new list containing all items (from 'lst'+'item'),
    while .insert() returns None. This makes it harder to
    keep track of all images at any moment during experiments.
    ...
    
    Parameters:
        lst: list object
        item: any type variable
    ---------------------------
    Variables:
        sliceIndex: type = int
            A randomly generated integer where lst is sliced
        lstTop: type = list
            Upper slice of lst (from lst[0] to lst[sliceIndex])
            'item' will be appended to lstTop after lstTop[sliceIndex].
            'lstBottom' will be appended to lstTop after lstTop[item].
        lstBottom: type = list
            Lower slice of lst (from lst[sliceIndex] to lst[len(lst)-1])
            Will be appended to 'lstTop' after lstTop[item].
            
    ----------------------------------
    Return:
        newlst: unidimensional list
            Calls flatten(lst) to vectorize 'lstTop'
            see <help(flatten)> for more details
    """
    insF = len(lst)/2
lst = ['a', 'b', 'c', 'd', 'e', 'f', 'g','h']
insF = int(len(lst)/2)
sliceIndexes = [rand.randint(,4) for ind in range(insF)]
    sliceIndex = rb(len(lst)-1)
    lstTop, lstBottom = lst[:sliceIndex], lst[sliceIndex:]
    lstTop.append(item)
    lstTop.append(lstBottom)
    newlst = flatten(lstTop)
    return newlst